---
# 参数（带默认值）
parameters:
  CPU:
    default: "sm8750"  # 默认 CPU 型号
  FEIL:
    default: "oneplus_ace5_pro"  # 默认设备型号
  CPUD:
    default: "sun"  # 默认 CPU 代号
  ANDROID_VERSION:
    default: "android15"  # 默认 Android 版本
  KERNEL_VERSION:
    default: "6.6"  # 默认内核版本
  KERNEL_NAME:
    default: "-android15-8-g013ec21bba94-abogki383916444@DUGH"  # 默认内核名称

# 环境变量
environment:
  CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"  # ccache 编译器检查配置
  CCACHE_NOHASHDIR: "true"  # ccache 禁用目录哈希
  CCACHE_HARDLINK: "true"  # ccache 启用硬链接

# 颜色定义
colors:
  RED: '\033[0;31m'  # 红色，用于错误提示
  GREEN: '\033[0;32m'  # 绿色，用于成功提示
  YELLOW: '\033[1;33m'  # 黄色，用于警告或提示
  NC: '\033[0m'  # 无颜色，重置终端颜色

# 函数定义
functions:
  error_exit:
    description: "打印错误信息并以退出码 1 退出"  # 函数描述
    parameters:
      - message  # 错误信息参数
    steps:
      - echo: "${RED}[ERROR] ${message}${NC}"  # 输出错误信息
      - exit: 1  # 退出程序

  check_directory:
    description: "检查目录是否存在，若不存在则报错退出"  # 函数描述
    parameters:
      - directory  # 目录路径参数
    steps:
      - condition:
          test: "! -d '${directory}'"  # 检查目录是否存在
          then:
            - call: error_exit
              args: "目录不存在: ${directory}"  # 调用错误退出函数

  maximize_build_space:
    description: "清理系统空间以最大化构建资源"  # 函数描述
    steps:
      - echo: "${YELLOW}清理系统空间...${NC}"  # 输出清理提示
      - sudo:
          - rm -rf /usr/share/dotnet  # 删除 .NET 相关文件
          - rm -rf /usr/local/lib/android  # 删除 Android 相关库
          - rm -rf /opt/hostedtoolcache/CodeQL  # 删除 CodeQL 缓存
          - rm -rf /usr/local/haskell  # 删除 Haskell 相关文件
          - apt clean  # 清理 apt 缓存
          - rm -rf /tmp/*  # 删除临时文件
          - df -h  # 显示磁盘空间
      - cd: /root/work/kernel_platform  # 切换到内核工作目录
      - run: tools/bazel clean --expunge  # 清理 Bazel 缓存
      - cd: ~  # 返回用户主目录

  clean_patches:
    description: "清理旧的补丁目录"  # 函数描述
    directories:
      - SukiSU_patch  # SukiSU 补丁目录
      - susfs4ksu  # susfs4ksu 补丁目录
      - kernel_patches  # 内核补丁目录
    steps:
      - echo: "${YELLOW}检查补丁目录...${NC}"  # 输出检查提示
      - loop:
          over: directories  # 遍历补丁目录
          as: dir
          steps:
            - condition:
                test: "-d '${dir}'"  # 检查目录是否存在
                then:
                  - echo: "删除旧补丁目录: ${dir}"  # 输出删除提示
                  - rm -rf "${dir}"  # 删除目录

  manage_source:
    description: "管理内核源码仓库的初始化和同步"  # 函数描述
    steps:
      - echo: "${YELLOW}检查内核源码...${NC}"  # 输出检查提示
      - condition:
          test: "-d 'work/.repo' && ! -f 'work/.repo/manifest.xml'"  # 检查是否存在损坏的 .repo 目录
          then:
            - echo: "${RED}检测到损坏的.repo目录，执行强制清理...${NC}"  # 输出清理提示
            - rm -rf work/.repo  # 删除损坏的 .repo 目录
      - condition:
          test: "-d 'work/.repo'"  # 检查是否存在有效源码仓库
          then:
            - echo: "${GREEN}检测到有效源码仓库，执行智能更新...${NC}"  # 输出更新提示
            - cd: work  # 切换到 work 目录
            - condition:
                test: "! -f '.repo/manifest.xml'"  # 检查 manifest 文件是否存在
                then:
                  - echo: "${YELLOW}检测到manifest丢失，重新初始化...${NC}"  # 输出初始化提示
                  - rm -rf .repo  # 删除 .repo 目录
                  - repo init:
                      url: https://github.com/OnePlusOSS/kernel_manifest.git  # 仓库地址
                      branch: "refs/heads/oneplus/${CPU}"  # 分支
                      manifest: "${FEIL}.xml"  # 清单文件
                      depth: 1  # 浅克隆
                      repo-url: https://gerrit.googlesource.com/git-repo  # repo 工具地址
            - echo: "${YELLOW}执行预同步验证...${NC}"  # 输出验证提示
            - condition:
                test: "! repo manifest -v"  # 验证 manifest 是否有效
                then:
                  - echo: "${RED}manifest验证失败，执行深度修复...${NC}"  # 输出修复提示
                  - repo init:
                      force: true  # 强制初始化
                      url: https://github.com/OnePlusOSS/kernel_manifest.git
                      branch: "refs/heads/oneplus/${CPU}"
                      manifest: "${FEIL}.xml"
                      depth: 1
                      repo-url: https://gerrit.googlesource.com/git-repo
            - retry:
                attempts: 5  # 重试次数
                steps:
                  - echo: "${YELLOW}同步尝试 (${retry}/5)...${NC}"  # 输出重试提示
                  - repo sync:
                      options: -c -j$(nproc --all) --no-tags --force-sync  # 同步命令
                  - condition:
                      test: success  # 检查同步是否成功
                      then:
                        - echo: "${GREEN}同步成功${NC}"  # 输出成功提示
                      else:
                        - echo: "${RED}同步失败，执行恢复操作...${NC}"  # 输出失败提示
                        - find .repo -name '*.lock' -delete  # 删除锁文件
                        - repo forall -c 'git reset --hard HEAD@{upstream} ; git clean -fdx'  # 重置仓库
                        - sleep: "${retry * 5}"  # 等待网络恢复
          else:
            - echo: "${GREEN}初始化新源码仓库...${NC}"  # 输出初始化提示
            - mkdir -p work  # 创建 work 目录
            - cd: work  # 切换到 work 目录
            - atomic:
                steps:
                  - repo init:
                      url: https://github.com/OnePlusOSS/kernel_manifest.git
                      branch: "refs/heads/oneplus/${CPU}"
                      manifest: "${FEIL}.xml"
                      depth: 1
                      repo-url: https://gerrit.googlesource.com/git-repo
                  - repo sync:
                      options: -c -j$(nproc --all) --no-tags --force-sync
                on_error:
                  - echo: "${RED}初始化失败，清理残留文件...${NC}"  # 输出错误提示
                  - cd: ..  # 返回上一级目录
                  - rm -rf work  # 删除 work 目录
                  - call: error_exit
                    args: "源码初始化失败"  # 调用错误退出函数
            - rm -rf /root/work/kernel_platform/common/android/abi_gki_protected_exports_*  # 清理残留文件
      - cd: /root/work/kernel_platform  # 切换到内核目录
      - condition:
          test: "-d 'KernelSU'"  # 检查 KernelSU 目录
          then:
            - echo: "${YELLOW}验证KernelSU目录结构...${NC}"  # 输出验证提示
            - condition:
                test: "-L 'KernelSU/kernel/kernel'"  # 检查是否存在循环符号链接
                then:
                  - echo: "${RED}检测到循环符号链接，执行修复...${NC}"  # 输出修复提示
                  - rm -vf KernelSU/kernel/kernel  # 删除符号链接
                  - git checkout -- KernelSU/kernel/  # 恢复目录
      - cd: ..  # 返回上一级目录

  main:
    description: "主构建流程"  # 函数描述
    steps:
      - echo:
          - "${GREEN}本脚本改自@偏爱星雾环绕 为ArchLinux提供支持${NC}"  # 输出脚本来源
          - "请确保已提前配置好git账号和足够的swap空间大小"  # 输出配置提醒
      - set:
          WORKSPACE_ROOT: "$(pwd)"  # 设置工作目录
          OUTPUT_DIR: "${WORKSPACE_ROOT}/kernel_output_dir/"  # 设置输出目录
      - echo:
          - "${GREEN}工作目录：${WORKSPACE_ROOT}${NC}"  # 输出工作目录
          - "${GREEN}产物输出目录：${OUTPUT_DIR}${NC}"  # 输出产物目录
      - call: maximize_build_space  # 调用清理空间函数
      - condition:
          test: "! -d '/root/work/kernel_platform'"  # 检查内核目录是否存在
          then:
            - sudo: mkdir /root/work/kernel_platform  # 创建内核目录
      - condition:
          test: "! -d '${OUTPUT_DIR}'"  # 检查输出目录是否存在
          then:
            - sudo: mkdir "${OUTPUT_DIR}"  # 创建输出目录
      - echo: "${YELLOW}安装系统依赖...${NC}"  # 输出依赖安装提示
      - sudo: pacman -Syy python3 git curl ccache gcc flex bison bazel openssl libelf zip
        input: "y"  # 自动确认安装
      - echo: "${YELLOW}设置repo工具...${NC}"  # 输出 repo 工具设置提示
      - condition:
          test: "! -f '/usr/local/bin/repo'"  # 检查 repo 工具是否存在
          then:
            - curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/repo  # 下载 repo 工具
            - chmod a+x ~/repo  # 设置执行权限
            - sudo: mv ~/repo /usr/local/bin/repo  # 移动到系统目录
      - call: clean_patches  # 调用清理补丁函数
      - call: manage_source  # 调用源码管理函数
      - rm -rf /root/work/kernel_platform/common/android/abi_gki_protected_exports_*  # 清理残留文件
      - echo: "${YELLOW}配置SukiSU...${NC}"  # 输出 SukiSU 配置提示
      - cd: /root/work/kernel_platform  # 切换到内核目录
      - curl:
          url: https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh
          pipe: bash -s susfs-dev  # 执行 SukiSU 配置脚本
      - cd: KernelSU  # 切换到 KernelSU 目录
      - set:
          KSU_VERSION: "$(expr $(git rev-list --count main) '+' 10606)"  # 计算 KSU 版本
      - sed:
          file: kernel/Makefile
          replace: "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/"  # 更新版本号
      - echo: "${YELLOW}检查符号链接...${NC}"  # 输出符号链接检查提示
      - condition:
          test: "find KernelSU/ -type l -exec ls -l {} \; | awk '{if($11 == $9) exit 1}'"  # 检查无效符号链接
          then:
            - call: error_exit
              args: "检测到无效符号链接"  # 调用错误退出函数
      - cd: ../../..  # 返回根目录
      - echo: "${YELLOW}配置SUSFS...${NC}"  # 输出 SUSFS 配置提示
      - cd: work  # 切换到 work 目录
      - git clone:
          - url: https://gitlab.com/simonpunk/susfs4ksu.git
            branch: "gki-${ANDROID_VERSION}-${KERNEL_VERSION}"  # 克隆 SUSFS 仓库
          - url: https://github.com/ExmikoN/SukiSU_patch.git  # 克隆 SukiSU 补丁仓库
      - cp:
          - susfs4ksu/kernel_patches/50_add_susfs_in_gki-${ANDROID_VERSION}-${KERNEL_VERSION}.patch kernel_platform/common/  # 复制补丁文件
          - susfs4ksu/kernel_patches/fs/* kernel_platform/common/fs/  # 复制文件系统补丁
          - susfs4ksu/kernel_patches/include/linux/* kernel_platform/common/include/linux/  # 复制头文件
      - echo: "${YELLOW}应用LZ4K补丁...${NC}"  # 输出 LZ4K 补丁应用提示
      - cp:
          - SukiSU_patch/other/lz4k/include/linux/* kernel_platform/common/include/linux  # 复制 LZ4K 头文件
          - SukiSU_patch/other/lz4k/lib/* kernel_platform/common/lib  # 复制 LZ4K 库文件
          - SukiSU_patch/other/lz4k/crypto/* kernel_platform/common/crypto  # 复制 LZ4K 加密文件
      - cd: kernel_platform/common  # 切换到 common 目录
      - sed:
          - file: 50_add_susfs_in_gki-${ANDROID_VERSION}-${KERNEL_VERSION}.patch
            replace: "s/-32,12 +32,38/-32,11 +32,37/g"  # 修改补丁文件
          - file: 50_add_susfs_in_gki-${ANDROID_VERSION}-${KERNEL_VERSION}.patch
            replace: "/#include <trace\/hooks\/fs.h>/d"  # 删除特定行
      - patch: -p1 < 50_add_susfs_in_gki-${ANDROID_VERSION}-${KERNEL_VERSION}.patch  # 应用补丁
      - cp: ../../SukiSU_patch/hooks/syscall_hooks.patch ./  # 复制系统调用补丁
      - patch: -p1 -F 3 < syscall_hooks.patch  # 应用系统调用补丁
      - echo: "${YELLOW}应用LZ4KD补丁...${NC}"  # 输出 LZ4KD 补丁应用提示
      - cp: ../../SukiSU_patch/other/lz4k_patch/${KERNEL_VERSION}/lz4kd.patch ./  # 复制 LZ4KD 补丁
      - patch: -p1 -F 3 < lz4kd.patch  # 应用 LZ4KD 补丁
      - echo: "${YELLOW}配置内核选项...${NC}"  # 输出内核配置提示
      - append:
          file: arch/arm64/configs/gki_defconfig
          content: |  # 添加 SUSFS 配置
            # SUSFS配置
            CONFIG_KSU=y
            CONFIG_KPM=y
            CONFIG_KSU_SUSFS_SUS_SU=n
            CONFIG_KSU_MANUAL_HOOK=y
            CONFIG_KSU_SUSFS=y
            CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
            CONFIG_KSU_SUSFS_SUS_PATH=y
            CONFIG_KSU_SUSFS_SUS_MOUNT=y
            CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
            CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
            CONFIG_KSU_SUSFS_SUS_KSTAT=y
            CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
            CONFIG_KSU_SUSFS_TRY_UMOUNT=y
            CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
            CONFIG_KSU_SUSFS_SPOOF_UNAME=y
            CONFIG_KSU_SUSFS_ENABLE_LOG=y
            CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
            CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
            CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
            CONFIG_CRYPTO_LZ4HC=y
            CONFIG_CRYPTO_LZ4K=y
            CONFIG_CRYPTO_LZ4KD=y
            CONFIG_CRYPTO_842=y
      - sed:
          file: build.config.gki
          replace: "s/check_defconfig//"  # 移除 defconfig 检查
      - git:
          - add -A  # 添加所有更改
          - commit -a -m "BUILD Kernel"  # 提交更改
      - cd: ../../..  # 返回根目录
      - echo: "${YELLOW}设置内核标识...${NC}"  # 输出内核标识设置提示
      - cd: work/kernel_platform  # 切换到内核目录
      - call: check_directory
        args: common/scripts  # 检查 scripts 目录
      - sed:
          file: common/scripts/setlocalversion
          replace: "s/res=\"\$res\$(cat \"\$file\")\"/res=\"${KERNEL_NAME}\"/g"  # 设置内核名称
      - cd: ../..  # 返回上一级目录
      - echo: "${YELLOW}开始内核编译...${NC}"  # 输出编译提示
      - cd: work/kernel_platform  # 切换到内核目录
      - echo: "${YELLOW}清理符号链接残留...${NC}"  # 输出清理提示
      - find:
          - kernel_platform/ -type l -name "kernel" -delete  # 删除符号链接
          - kernel_platform/ -type d -empty -delete  # 删除空目录
      - call: check_directory
        args: tools  # 检查 tools 目录
      - run: tools/bazel run --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist  # 编译内核
      - echo: "${YELLOW}打包内核镜像...${NC}"  # 输出打包提示
      - cd: /root/work/kernel_platform/dist  # 切换到 dist 目录
      - condition:
          test: "${FEIL} = 'oneplus_ace5_pro'"  # 检查设备型号
          then:
            - git clone:
                url: https://github.com/aa123330/AnyKernel3.git
                branch: a5p
                depth: 1  # 浅克隆 AnyKernel3
          else:
            - git clone:
                url: https://github.com/aa123330/AnyKernel3.git
                depth: 1  # 浅克隆 AnyKernel3
      - rm -rf AnyKernel3/.git AnyKernel3/push.sh  # 清理 AnyKernel3 文件
      - cp: Image AnyKernel3/  # 复制内核镜像
      - echo: "${YELLOW}正在生成刷机包...${NC}"  # 输出刷机包生成提示
      - cd: AnyKernel3  # 切换到 AnyKernel3 目录
      - cp: /root/work/SukiSU_patch/kpm/patch_linux ./  # 复制 patch_linux 脚本
      - chmod: 777 patch_linux  # 设置执行权限
      - run: ./patch_linux  # 执行 patch_linux
      - rm -rf Image  # 删除原始镜像
      - mv: oImage Image  # 重命名镜像
      - rm -rf patch_linux  # 删除 patch_linux
      - set:
          timestamp: "$(date +%Y%m%d%H%M)"  # 设置时间戳
          output_zip: "SuKiSu_${KSU_VERSION}_${FEIL}_${timestamp}.zip"  # 设置输出文件名
      - zip: -r "../${output_zip}" *  # 打包刷机包
      - echo: "${YELLOW}移动产物到${OUTPUT_DIR}...${NC}"  # 输出移动提示
      - sudo: mkdir -p "${OUTPUT_DIR}"  # 创建输出目录
      - sudo: mv "../${output_zip}" "${OUTPUT_DIR}/"  # 移动刷机包
      - cd: "${WORKSPACE_ROOT}"  # 返回工作目录
      - set:
          final_path: "${OUTPUT_DIR}/${output_zip}"  # 设置最终路径
      - echo:
          - "${GREEN}构建完成！刷机包路径：${NC}"  # 输出完成提示
          - "${YELLOW}${final_path}${NC}"  # 输出刷机包路径
      - sudo: chown $USER: "${final_path}"  # 修复文件权限

# 执行主函数
execute:
  function: main
  args: "$@"
